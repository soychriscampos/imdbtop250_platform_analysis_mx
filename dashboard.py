import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("data/imdb_top250.csv")

# Position in ranking
df["Pos IMDb"] = df.index + 1

# Separing platforms
df["Plataforma"] = df["Plataforma"].str.split(", ")
df = df.explode("Plataforma").reset_index(drop=True)

# st.title("An√°lisis sobre el Top 250 de IMDb en Plataformas de Streaming en M√©xico")
# st.title("An√°lisis sobre las mejores 250 pel√≠culas de IMDb en Plataformas de Streaming en M√©xico")
st.title("Top 250 IMDb: ¬øEn Qu√© Plataformas de Streaming Est√°n Disponibles en M√©xico?")
st.markdown(f"""Actualizaci√≥n: 19 de marzo de 2025  
Por: [Christian Campos](https://x.com/soychriscampos)""")
st.markdown("---")

st.markdown(f"""
**üìå Sobre este an√°lisis:**
Este estudio analiza en qu√© plataformas de streaming en M√©xico con suscripci√≥n est√°ndard est√°n disponibles las pel√≠culas del **Top 250 de IMDb**. 

- Los datos fueron obtenidos de **IMDb** (Top 250) y **JustWatch** (plataformas de streaming).
- **No se tomaron en cuenta** pel√≠culas disponibles solo para **compra o renta** en plataformas digitales.
- **No se incluyeron "Channels" dentro de plataformas** (ej. *HBO Max en Amazon Channel*).
- Si una pel√≠cula **solo estaba disponible para compra/renta**, se consider√≥ como **"Ninguna Plataforma"**.
- Se consideraron √∫nicamente **las suscripciones est√°ndar de cada plataforma**.
""")
st.markdown("---")

# General:
st.subheader("Panorama General:")
st.markdown("¬øD√≥nde se encuentran las pel√≠culas?")
platform_counts = df["Plataforma"].value_counts()

category_num = 6
if len(platform_counts) > category_num:
    top_platforms = platform_counts.nlargest(category_num - 1)
    other_platforms = platform_counts.iloc[category_num -1:].sum()
    top_platforms["Otra"] = other_platforms
else:
    top_platforms = platforms_counts

# chart order
top_platforms = top_platforms.sort_values(ascending=False)

fig, ax = plt.subplots(figsize=(8,6))
fig.patch.set_alpha(0)
ax.set_facecolor("none")

# colors
colors = sns.color_palette("Blues", len(top_platforms))
colors = [(r*0.8, g*0.8, b*0.9) for r, g, b in colors[::-1]]
top_platforms.plot(kind="pie", 
                   autopct=lambda p: f'{p:.1f}%', 
                   startangle=140, 
                   ax=ax,
                   colors=colors,
                  textprops={'color': black}
)
ax.set_ylabel("")
st.pyplot(fig)

st.markdown(f"""
üìä **Hallazgos destacados:**  
- Sorprendentemente, **el 46.1%** de las pel√≠culas del Top 250 de IMDb **no est√°n disponibles** en ninguna plataforma de streaming en M√©xico con suscripci√≥n est√°ndard, seg√∫n los datos actuales de JustWatch.
- **Max** lidera la oferta con el **13.6%** de las pel√≠culas disponibles, seguido por **Amazon Prime Video** y **Disney Plus**.
- La categor√≠a **Otra** concentra un grupo de plataformas menores que suman **9.5%**, mientras que **Netflix**, aunque relevante, s√≥lo ofrece el **8.8%** de las pel√≠culas de este ranking.
""")


st.markdown("---")
# Platform Selection:
st.subheader("Selecciona una plataforma:")
plataform = st.selectbox("", df["Plataforma"].unique())

# Data over platform
filter_df = df[df["Plataforma"] == plataform][["Pos IMDb","T√≠tulo Original", "T√≠tulo Alternativo", "A√±o", "Calificaci√≥n", "Duraci√≥n (min)", "G√©nero"]]


st.dataframe(filter_df, hide_index=True)

# Platform summary
st.subheader("Resumen de la Plataforma")
# Movies / platform
st.markdown(f"Se encontraron **{filter_df.shape[0]}/250** pel√≠culas en **{plataform}**")

# Top Genres
genres = filter_df["G√©nero"].str.split(", ").explode()
top_generos = genres.value_counts().head(3).index.tolist()
st.markdown(f"üé≠ **G√©neros m√°s comunes:** {', '.join(top_generos)}")

# Avg duration
duracion_promedio = round(filter_df["Duraci√≥n (min)"].mean())
st.markdown(f"‚è≥ **Duraci√≥n promedio de las pel√≠culas:** {duracion_promedio} min.")

# Avg rating
calificacion_promedio = round(filter_df["Calificaci√≥n"].mean(), 1)
st.markdown(f"‚≠ê **Calificaci√≥n promedio de las pel√≠culas:** {calificacion_promedio} (imdb).")

# oldest and newest
oldest_movie = filter_df[filter_df["A√±o"] == filter_df["A√±o"].min()]["T√≠tulo Original"].values[0]
newest_movie = filter_df[filter_df["A√±o"] == filter_df["A√±o"].max()]["T√≠tulo Original"].values[0]
st.markdown(f"üéû **Pel√≠cula m√°s antigua:** {oldest_movie} ({filter_df['A√±o'].min()}).")
st.markdown(f"üé¨ **Pel√≠cula m√°s reciente:** {newest_movie} ({filter_df['A√±o'].max()}).")

# decade movie
filter_df["D√©cada"] = (filter_df["A√±o"] // 10) * 10
decades = filter_df["D√©cada"].value_counts().sort_index()

st.subheader(f"Distribuci√≥n de Pel√≠culas por D√©cada en **{plataform}**.")
st.markdown("Para saber en qu√© d√©cada se hicieron mas pel√≠culas:")
st.bar_chart(decades)
st.markdown(f"""---  
Disclaimer: Dado que algunas plataformas realizan cambios constantes en sus cat√°logos de pel√≠culas, algunos t√≠tulos podr√≠an no encontrarse al momento de tu consulta, sugiero revises la fecha de actualizaci√≥n de la parte de arriba para una mejor orientaci√≥n.
""")
